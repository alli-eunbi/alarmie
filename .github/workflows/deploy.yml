name: Node CI

on:  
  push:
    branches: [main]
  pull_request:
    branches: [main]
    
jobs: ## job 들을 명시
  # build: ## job id
  #   runs-on: ubuntu-latest ## 해당 job의 구동 환경을 정의
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Use Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 16.x
  #     # Github Repository Secrets를 통해 환경 변수 파일을 생성합니다.
  #     - name: Generate Environment Variables File for Production
  #       run: |
  #         echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> .env
  #         echo "SUBNET_ID_1=$SUBNET_ID_1" >> .env
  #         echo "SUBNET_ID_2=$SUBNET_ID_2" >> .env
  #         echo "SUBNET_ID_3=$SUBNET_ID_3" >> .env
  #         echo "SUBNET_ID_4=$SUBNET_ID_4" >> .env
  #       env:
  #         SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
  #         SUBNET_ID_1: ${{ secrets.SUBNET_ID_1 }}
  #         SUBNET_ID_2: ${{ secrets.SUBNET_ID_2 }}
  #         SUBNET_ID_3: ${{ secrets.SUBNET_ID_3 }}
  #         SUBNET_ID_4: ${{ secrets.SUBNET_ID_4 }}
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       id: cache
  #       with:
  #         # node_modules라는 폴더를 검사하여
  #         path: node_modules
  #         # 아래 키값으로 cache가 돼있는지 확인합니다.
  #         key: npm-packages-${{ hashFiles('**/package-lock.json') }}
  #     - name: Npm Install, build and test
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: |
  #         yarn install
  #         yarn build
  #         yarn test
  #         # env:
  #         #   CI: true
  deploy:
    # needs: build
    runs-on: ubuntu-latest ## 해당 job의 구동 환경을 정의
    steps:
      - uses: actions/checkout@v1
      - name: Generate Environment Variables File for Production
        run: |
          echo "DATABASE_HOST=$DATABASE_HOST"    >> .env
          echo "DATABASE_PORT=$DATABASE_PORT"    >> .env
          echo "DATABASE_USERNAME=$DATABASE_USERNAME"    >> .env
          echo "DATABADATABASE_PASSWORDSE_HOST=$DATABADATABASE_PASSWORDSE_HOST"    >> .env
          echo "DATABASE_DATABASE_NAME=$DATABASE_DATABASE_NAME"    >> .env
        env : 
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABADATABASE_PASSWORDSE_HOST: ${{ secrets.DATABADATABASE_PASSWORDSE_HOST }}
          DATABASE_DATABASE_NAME: ${{ secrets.DATABASE_DATABASE_NAME }} 
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          # node_modules라는 폴더를 검사하여
          path: node_modules
          # 아래 키값으로 cache가 돼있는지 확인합니다.
          key: npm-packages-${{ hashFiles('**/package-lock.json') }}
      # Github Repository Secrets를 통해 환경 변수 파일을 생성합니다.
      - name: Npm Install, build and test
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          yarn install
          yarn build
          yarn test
          # env:
          #   CI: true
      - name: remove deployed-server
        uses: serverless/github-action@v3.1
        with:
          args: remove
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          SUBNET_ID_1: ${{ secrets.SUBNET_ID_1 }}
          SUBNET_ID_2: ${{ secrets.SUBNET_ID_2 }}
          SUBNET_ID_3: ${{ secrets.SUBNET_ID_3 }}
          SUBNET_ID_4: ${{ secrets.SUBNET_ID_4 }}
      - name: Install Plugin and Deploy
        uses: serverless/github-action@v3.1
        with:
          args: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          SUBNET_ID_1: ${{ secrets.SUBNET_ID_1 }}
          SUBNET_ID_2: ${{ secrets.SUBNET_ID_2 }}
          SUBNET_ID_3: ${{ secrets.SUBNET_ID_3 }}
          SUBNET_ID_4: ${{ secrets.SUBNET_ID_4 }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABADATABASE_PASSWORDSE_HOST: ${{ secrets.DATABADATABASE_PASSWORDSE_HOST }}
          DATABASE_DATABASE_NAME: ${{ secrets.DATABASE_DATABASE_NAME }} 